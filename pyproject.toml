[project]
name = "ace-playbook"
version = "1.14.0"
description = "Adaptive Code Evolution - Self-improving LLM system with Generator-Reflector-Curator pattern"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "ACE Team", email = "team@example.com"}
]
keywords = ["llm", "dspy", "self-improvement", "adaptive-learning", "playbook"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "dspy-ai>=2.5.0",
    "faiss-cpu>=1.8.0",
    "sentence-transformers>=2.5.0",
    "numpy>=1.24.0",
    "pydantic>=2.6.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "openai>=1.12.0",
    "anthropic>=0.18.0",
    "python-dotenv>=1.0.0",
    "structlog>=24.1.0",
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.27.0",
    "opentelemetry-sdk>=1.27.0",
    "opentelemetry-exporter-otlp-proto-http>=1.27.0",
    "opentelemetry-instrumentation-sqlalchemy>=0.48b0",
    "opentelemetry-instrumentation-requests>=0.48b0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.98.0",
    "black>=24.0.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "radon>=6.0.1",
    "safety>=3.0.0",
    "pip-audit>=2.7.0",
    "bandit[toml]>=1.7.8",
    "mutmut>=2.4.5",
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=2.0.0",
    "myst-parser>=2.0.0",
]

[build-system]
requires = ["setuptools>=68.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["ace*"]
exclude = ["tests*", "examples*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers --cov=ace --cov-report=term-missing --cov-report=html"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow-running tests",
    "tool_validation: Tool signature validation tests",
    "performance: Performance benchmark tests",
    "react: ReAct agent-specific tests",
    "backward_compat: Backward compatibility tests",
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "dspy.*",
    "faiss.*",
    "sentence_transformers.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "examples", ".venv", "venv", "alembic"]
skips = ["B101"]  # assert_used - OK in tests

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = true
ignore-nested-classes = true
fail-under = 80
exclude = ["tests", "examples", "setup.py", "docs"]
verbose = 2
quiet = false
whitelist-regex = []
color = true

# Mutation testing configuration
# Run with: mutmut run
# Note: mutmut 3.x uses directory scanning by default
# See scripts/run_mutation_tests.sh for usage examples
